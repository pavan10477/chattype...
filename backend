// server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
const { Configuration, OpenAIApi } = require('openai');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(helmet());
app.use(compression());
app.use(express.json());

// Basic rate limiter
const limiter = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 20, // limit each IP to 20 requests per minute
});
app.use(limiter);

// OpenAI API config
const openai = new OpenAIApi(new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
}));

// Streaming chat endpoint
app.post('/chat', async (req, res) => {
  const { messages } = req.body;

  if (!messages || !Array.isArray(messages)) {
    return res.status(400).json({ error: 'Invalid message format' });
  }

  try {
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');

    const completion = await openai.createChatCompletion(
      {
        model: 'gpt-4',
        messages: messages,
        stream: true,
      },
      { responseType: 'stream' }
    );

    completion.data.on('data', (chunk) => {
      const payloads = chunk
        .toString()
        .split('\n')
        .filter((line) => line.trim() !== '' && line.startsWith('data: '));

      for (const payload of payloads) {
        const data = payload.replace(/^data: /, '');
        if (data === '[DONE]') {
          res.write('event: done\ndata: [DONE]\n\n');
          res.end();
          return;
        }

        const parsed = JSON.parse(data);
        const content = parsed.choices?.[0]?.delta?.content;
        if (content) {
          res.write(`data: ${content}\n\n`);
        }
      }
    });

    completion.data.on('end', () => {
      res.end();
    });

    completion.data.on('error', (err) => {
      console.error('Stream error:', err);
      res.status(500).write('event: error\ndata: Internal server error\n\n');
      res.end();
    });
  } catch (err) {
    console.error('OpenAI error:', err);
    res.status(500).json({ error: 'OpenAI API failed' });
  }
});

app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));
